name: AI Agent CI/CD Pipeline

on:
push:
branches: [ main, develop ]
pull_request:
branches: [ main ]
schedule:
# Run daily security and dependency checks
- cron: ‘0 6 * * *’

env:
PYTHON_VERSION: ‘3.11’
NODE_VERSION: ‘18’

jobs:
code-quality:
runs-on: ubuntu-latest
name: Code Quality and Linting

```
steps:
- name: Checkout repository
  uses: actions/checkout@v4
  
- name: Set up Python
  uses: actions/setup-python@v4
  with:
    python-version: ${{ env.PYTHON_VERSION }}
    
- name: Install dependencies
  run: |
    python -m pip install --upgrade pip
    pip install black isort flake8 mypy bandit safety
    if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
- name: Run Black code formatter
  run: black --check --diff .
  
- name: Run isort import sorter
  run: isort --check-only --diff .
  
- name: Run flake8 linter
  run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  
- name: Run extended flake8 checks
  run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  
- name: Run mypy type checker
  run: mypy . --ignore-missing-imports
  continue-on-error: true
```

security-scan:
runs-on: ubuntu-latest
name: Security and Vulnerability Scanning

```
steps:
- name: Checkout repository
  uses: actions/checkout@v4
  
- name: Set up Python
  uses: actions/setup-python@v4
  with:
    python-version: ${{ env.PYTHON_VERSION }}
    
- name: Install security tools
  run: |
    python -m pip install --upgrade pip
    pip install bandit safety
    if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
- name: Run Bandit security linter
  run: bandit -r . -f json -o bandit-report.json
  continue-on-error: true
  
- name: Run Safety vulnerability check
  run: safety check --json --output safety-report.json
  continue-on-error: true
  
- name: Upload security reports
  uses: actions/upload-artifact@v3
  with:
    name: security-reports
    path: |
      bandit-report.json
      safety-report.json
```

test:
runs-on: ${{ matrix.os }}
strategy:
matrix:
os: [ubuntu-latest, windows-latest, macos-latest]
python-version: [‘3.9’, ‘3.10’, ‘3.11’, ‘3.12’]

```
name: Test Suite - Python ${{ matrix.python-version }} on ${{ matrix.os }}

steps:
- name: Checkout repository
  uses: actions/checkout@v4
  
- name: Set up Python ${{ matrix.python-version }}
  uses: actions/setup-python@v4
  with:
    python-version: ${{ matrix.python-version }}
    
- name: Install dependencies
  run: |
    python -m pip install --upgrade pip
    pip install pytest pytest-cov pytest-asyncio pytest-mock
    if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
- name: Create test structure if needed
  run: |
    mkdir -p tests
    if [ ! -f tests/__init__.py ]; then touch tests/__init__.py; fi
    if [ ! -f tests/test_agent.py ]; then
      cat > tests/test_agent.py << 'EOF'
      import pytest
      
      def test_basic_functionality():
          """Basic test to ensure testing infrastructure works"""
          assert True
          
      def test_import_structure():
          """Test that main modules can be imported"""
          try:
              # Adjust imports based on your actual structure
              pass
          except ImportError as e:
              pytest.skip(f"Module import failed: {e}")
      EOF
    fi
    
- name: Run tests with coverage
  run: |
    pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
    
- name: Upload coverage reports
  if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
  uses: codecov/codecov-action@v3
  with:
    file: ./coverage.xml
    flags: unittests
    name: codecov-umbrella
```

ai-agent-tests:
runs-on: ubuntu-latest
name: AI Agent Specific Tests
needs: [code-quality]

```
steps:
- name: Checkout repository
  uses: actions/checkout@v4
  
- name: Set up Python
  uses: actions/setup-python@v4
  with:
    python-version: ${{ env.PYTHON_VERSION }}
    
- name: Install AI/ML dependencies
  run: |
    python -m pip install --upgrade pip
    pip install openai anthropic langchain numpy pandas
    if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
- name: Test AI agent functionality
  env:
    OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  run: |
    # Create a basic AI agent test
    cat > test_ai_agent.py << 'EOF'
    import os
    import sys
    
    def test_ai_integration():
        """Test AI service integration"""
        # Mock test for AI functionality
        print("Testing AI agent integration...")
        
        # Check if API keys are available for integration tests
        if os.getenv('OPENAI_API_KEY') or os.getenv('ANTHROPIC_API_KEY'):
            print("✓ AI service credentials available")
        else:
            print("⚠ No AI service credentials - skipping integration tests")
        
        print("✓ AI agent test completed")
        
    if __name__ == "__main__":
        test_ai_integration()
    EOF
    python test_ai_agent.py
```

build-and-package:
runs-on: ubuntu-latest
name: Build and Package Application
needs: [test, security-scan]

```
steps:
- name: Checkout repository
  uses: actions/checkout@v4
  
- name: Set up Python
  uses: actions/setup-python@v4
  with:
    python-version: ${{ env.PYTHON_VERSION }}
    
- name: Install build tools
  run: |
    python -m pip install --upgrade pip
    pip install build wheel setuptools
    
- name: Create setup.py if needed
  run: |
    if [ ! -f setup.py ]; then
      cat > setup.py << 'EOF'
    from setuptools import setup, find_packages
    
    setup(
        name="ai-agent-interpreter",
        version="0.1.0",
        description="Python interpreter AI agent application",
        packages=find_packages(),
        python_requires=">=3.9",
        install_requires=[
            "openai>=1.0.0",
            "anthropic>=0.7.0",
            "langchain>=0.0.300",
            "fastapi>=0.100.0",
            "uvicorn>=0.20.0",
        ],
        entry_points={
            "console_scripts": [
                "ai-agent=main:main",
            ],
        },
    )
    EOF
    fi
    
- name: Build package
  run: |
    python -m build
    
- name: Upload build artifacts
  uses: actions/upload-artifact@v3
  with:
    name: python-package
    path: dist/
```

docker-build:
runs-on: ubuntu-latest
name: Docker Build and Test
needs: [build-and-package]

```
steps:
- name: Checkout repository
  uses: actions/checkout@v4
  
- name: Create Dockerfile if needed
  run: |
    if [ ! -f Dockerfile ]; then
      cat > Dockerfile << 'EOF'
    FROM python:3.11-slim
    
    WORKDIR /app
    
    # Install system dependencies
    RUN apt-get update && apt-get install -y \
        gcc \
        && rm -rf /var/lib/apt/lists/*
    
    # Copy requirements and install Python dependencies
    COPY requirements*.txt ./
    RUN pip install --no-cache-dir -r requirements.txt
    
    # Copy application code
    COPY . .
    
    # Create non-root user
    RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
    USER appuser
    
    # Expose port
    EXPOSE 8000
    
    # Run application
    CMD ["python", "main.py"]
    EOF
    fi
    
- name: Build Docker image
  run: |
    docker build -t ai-agent:${{ github.sha }} .
    docker tag ai-agent:${{ github.sha }} ai-agent:latest
    
- name: Test Docker image
  run: |
    docker run --rm ai-agent:latest python -c "print('Docker build successful')"
```

deploy-staging:
runs-on: ubuntu-latest
name: Deploy to Staging
needs: [ai-agent-tests, docker-build]
if: github.ref == ‘refs/heads/develop’
environment: staging

```
steps:
- name: Checkout repository
  uses: actions/checkout@v4
  
- name: Deploy to staging environment
  run: |
    echo "Deploying to staging environment..."
    # Add your staging deployment commands here
    # Example: Deploy to cloud provider, update containers, etc.
    echo "Staging deployment completed"
```

deploy-production:
runs-on: ubuntu-latest
name: Deploy to Production
needs: [ai-agent-tests, docker-build]
if: github.ref == ‘refs/heads/main’
environment: production

```
steps:
- name: Checkout repository
  uses: actions/checkout@v4
  
- name: Deploy to production environment
  run: |
    echo "Deploying to production environment..."
    # Add your production deployment commands here
    # Example: Deploy to cloud provider, update containers, etc.
    echo "Production deployment completed"
```

performance-test:
runs-on: ubuntu-latest
name: Performance Testing
needs: [deploy-staging]
if: github.ref == ‘refs/heads/develop’

```
steps:
- name: Checkout repository
  uses: actions/checkout@v4
  
- name: Run performance tests
  run: |
    echo "Running performance tests..."
    # Add performance testing commands here
    # Example: Load testing, stress testing, etc.
    echo "Performance tests completed"
```

notify:
runs-on: ubuntu-latest
name: Notification
needs: [deploy-staging, deploy-production]
if: always()

```
steps:
- name: Notify on success
  if: success()
  run: |
    echo "✅ CI/CD Pipeline completed successfully"
    # Add notification logic here (Slack, email, etc.)
    
- name: Notify on failure
  if: failure()
  run: |
    echo "❌ CI/CD Pipeline failed"
    # Add failure notification logic here
```# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
